#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HavanaDAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HavanaRealEstate")]
	public partial class HavanadataclassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFeebackRply(FeebackRply instance);
    partial void UpdateFeebackRply(FeebackRply instance);
    partial void DeleteFeebackRply(FeebackRply instance);
    partial void Inserttblavailableblock(tblavailableblock instance);
    partial void Updatetblavailableblock(tblavailableblock instance);
    partial void Deletetblavailableblock(tblavailableblock instance);
    partial void Inserttblbank(tblbank instance);
    partial void Updatetblbank(tblbank instance);
    partial void Deletetblbank(tblbank instance);
    partial void Inserttblblockcategory(tblblockcategory instance);
    partial void Updatetblblockcategory(tblblockcategory instance);
    partial void Deletetblblockcategory(tblblockcategory instance);
    partial void Inserttblcontactus(tblcontactus instance);
    partial void Updatetblcontactus(tblcontactus instance);
    partial void Deletetblcontactus(tblcontactus instance);
    partial void InserttblEmiMode(tblEmiMode instance);
    partial void UpdatetblEmiMode(tblEmiMode instance);
    partial void DeletetblEmiMode(tblEmiMode instance);
    partial void Inserttblfeedback(tblfeedback instance);
    partial void Updatetblfeedback(tblfeedback instance);
    partial void Deletetblfeedback(tblfeedback instance);
    partial void InserttblInvoice(tblInvoice instance);
    partial void UpdatetblInvoice(tblInvoice instance);
    partial void DeletetblInvoice(tblInvoice instance);
    partial void Inserttblkyc(tblkyc instance);
    partial void Updatetblkyc(tblkyc instance);
    partial void Deletetblkyc(tblkyc instance);
    partial void InserttblPayment(tblPayment instance);
    partial void UpdatetblPayment(tblPayment instance);
    partial void DeletetblPayment(tblPayment instance);
    partial void InserttblPaymentHistory(tblPaymentHistory instance);
    partial void UpdatetblPaymentHistory(tblPaymentHistory instance);
    partial void DeletetblPaymentHistory(tblPaymentHistory instance);
    partial void InserttblPaymentMode(tblPaymentMode instance);
    partial void UpdatetblPaymentMode(tblPaymentMode instance);
    partial void DeletetblPaymentMode(tblPaymentMode instance);
    partial void InserttblPlanCharge(tblPlanCharge instance);
    partial void UpdatetblPlanCharge(tblPlanCharge instance);
    partial void DeletetblPlanCharge(tblPlanCharge instance);
    partial void InserttblPlansMaster(tblPlansMaster instance);
    partial void UpdatetblPlansMaster(tblPlansMaster instance);
    partial void DeletetblPlansMaster(tblPlansMaster instance);
    partial void Inserttblprofile(tblprofile instance);
    partial void Updatetblprofile(tblprofile instance);
    partial void Deletetblprofile(tblprofile instance);
    partial void InserttblProperty(tblProperty instance);
    partial void UpdatetblProperty(tblProperty instance);
    partial void DeletetblProperty(tblProperty instance);
    partial void Inserttblreg(tblreg instance);
    partial void Updatetblreg(tblreg instance);
    partial void Deletetblreg(tblreg instance);
    partial void Inserttblrplycontact(tblrplycontact instance);
    partial void Updatetblrplycontact(tblrplycontact instance);
    partial void Deletetblrplycontact(tblrplycontact instance);
    #endregion
		
		public HavanadataclassesDataContext() : 
				base(global::HavanaDAL.Properties.Settings.Default.HavanaRealEstateConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HavanadataclassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HavanadataclassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HavanadataclassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HavanadataclassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FeebackRply> FeebackRplies
		{
			get
			{
				return this.GetTable<FeebackRply>();
			}
		}
		
		public System.Data.Linq.Table<tblavailableblock> tblavailableblocks
		{
			get
			{
				return this.GetTable<tblavailableblock>();
			}
		}
		
		public System.Data.Linq.Table<tblbank> tblbanks
		{
			get
			{
				return this.GetTable<tblbank>();
			}
		}
		
		public System.Data.Linq.Table<tblblockcategory> tblblockcategories
		{
			get
			{
				return this.GetTable<tblblockcategory>();
			}
		}
		
		public System.Data.Linq.Table<tblcontactus> tblcontactus
		{
			get
			{
				return this.GetTable<tblcontactus>();
			}
		}
		
		public System.Data.Linq.Table<tblEmiMode> tblEmiModes
		{
			get
			{
				return this.GetTable<tblEmiMode>();
			}
		}
		
		public System.Data.Linq.Table<tblfeedback> tblfeedbacks
		{
			get
			{
				return this.GetTable<tblfeedback>();
			}
		}
		
		public System.Data.Linq.Table<tblInvoice> tblInvoices
		{
			get
			{
				return this.GetTable<tblInvoice>();
			}
		}
		
		public System.Data.Linq.Table<tblkyc> tblkycs
		{
			get
			{
				return this.GetTable<tblkyc>();
			}
		}
		
		public System.Data.Linq.Table<tblPayment> tblPayments
		{
			get
			{
				return this.GetTable<tblPayment>();
			}
		}
		
		public System.Data.Linq.Table<tblPaymentHistory> tblPaymentHistories
		{
			get
			{
				return this.GetTable<tblPaymentHistory>();
			}
		}
		
		public System.Data.Linq.Table<tblPaymentMode> tblPaymentModes
		{
			get
			{
				return this.GetTable<tblPaymentMode>();
			}
		}
		
		public System.Data.Linq.Table<tblPlanCharge> tblPlanCharges
		{
			get
			{
				return this.GetTable<tblPlanCharge>();
			}
		}
		
		public System.Data.Linq.Table<tblPlansMaster> tblPlansMasters
		{
			get
			{
				return this.GetTable<tblPlansMaster>();
			}
		}
		
		public System.Data.Linq.Table<tblprofile> tblprofiles
		{
			get
			{
				return this.GetTable<tblprofile>();
			}
		}
		
		public System.Data.Linq.Table<tblProperty> tblProperties
		{
			get
			{
				return this.GetTable<tblProperty>();
			}
		}
		
		public System.Data.Linq.Table<tblreg> tblregs
		{
			get
			{
				return this.GetTable<tblreg>();
			}
		}
		
		public System.Data.Linq.Table<tblrplycontact> tblrplycontacts
		{
			get
			{
				return this.GetTable<tblrplycontact>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Sp_Invoice")]
		public int Sp_Invoice([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceNo", DbType="BigInt")] System.Nullable<long> invoiceNo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Message", DbType="VarChar(100)")] ref string message)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, invoiceNo, message);
			message = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Sp_PaymentMode")]
		public int Sp_PaymentMode([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mode", DbType="Int")] System.Nullable<int> mode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankName", DbType="VarChar(50)")] string bankName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankBranch", DbType="VarChar(50)")] string bankBranch, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Check", DbType="BigInt")] System.Nullable<long> check, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DD", DbType="BigInt")] System.Nullable<long> dD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransactionID", DbType="VarChar(50)")] string transactionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmiModeId", DbType="Int")] System.Nullable<int> emiModeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Message", DbType="VarChar(100)")] ref string message)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, mode, bankName, bankBranch, check, dD, transactionID, emiModeId, message);
			message = ((string)(result.GetParameterValue(8)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_propertydetails")]
		public ISingleResult<sp_propertydetailsResult> sp_propertydetails()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<sp_propertydetailsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_rating")]
		public ISingleResult<sp_ratingResult> sp_rating()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<sp_ratingResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spPaymentMode")]
		public int spPaymentMode([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mode", DbType="Int")] System.Nullable<int> mode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankName", DbType="VarChar(50)")] string bankName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankBranch", DbType="VarChar(50)")] string bankBranch, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cheque", DbType="Int")] System.Nullable<int> cheque, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DD", DbType="Int")] System.Nullable<int> dD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransactionId", DbType="VarChar(50)")] string transactionId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmiModeId", DbType="Int")] System.Nullable<int> emiModeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, mode, bankName, bankBranch, cheque, dD, transactionId, emiModeId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spUpdatePayment")]
		public int spUpdatePayment([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmiMode", DbType="Int")] System.Nullable<int> emiMode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalAmount", DbType="Decimal(18,2)")] System.Nullable<decimal> totalAmount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PaidAmount", DbType="Decimal(18,2)")] System.Nullable<decimal> paidAmount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DueAmount", DbType="Decimal(18,2)")] System.Nullable<decimal> dueAmount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExtraCharge", DbType="Decimal(18,2)")] System.Nullable<decimal> extraCharge, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InstallmentNo", DbType="Int")] System.Nullable<int> installmentNo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NextDate", DbType="DateTime")] System.Nullable<System.DateTime> nextDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PaymentDate", DbType="DateTime")] System.Nullable<System.DateTime> paymentDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Message", DbType="VarChar(100)")] ref string message)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, emiMode, totalAmount, paidAmount, dueAmount, extraCharge, installmentNo, nextDate, paymentDate, message);
			message = ((string)(result.GetParameterValue(9)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spViewAllBlocks")]
		public ISingleResult<spViewAllBlocksResult> spViewAllBlocks([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BlockName", DbType="VarChar(50)")] string blockName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BlockNo", DbType="Int")] System.Nullable<int> blockNo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), blockName, blockNo);
			return ((ISingleResult<spViewAllBlocksResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spPaymentHistory")]
		public int spPaymentHistory([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmiMode", DbType="Int")] System.Nullable<int> emiMode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalAmount", DbType="Decimal(18,2)")] System.Nullable<decimal> totalAmount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PaidAmount", DbType="Decimal(18,2)")] System.Nullable<decimal> paidAmount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DueAmount", DbType="Decimal(18,2)")] System.Nullable<decimal> dueAmount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExtraCharge", DbType="Decimal(18,2)")] System.Nullable<decimal> extraCharge, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InstallmentNo", DbType="Int")] System.Nullable<int> installmentNo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NextDate", DbType="DateTime")] System.Nullable<System.DateTime> nextDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PaymentDate", DbType="DateTime")] System.Nullable<System.DateTime> paymentDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PrintInvoiceNo", DbType="BigInt")] ref System.Nullable<long> printInvoiceNo)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, emiMode, totalAmount, paidAmount, dueAmount, extraCharge, installmentNo, nextDate, paymentDate, printInvoiceNo);
			printInvoiceNo = ((System.Nullable<long>)(result.GetParameterValue(9)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spPropertyDetails")]
		public ISingleResult<spPropertyDetailsResult> spPropertyDetails([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyId", DbType="Int")] System.Nullable<int> propertyId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyId);
			return ((ISingleResult<spPropertyDetailsResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeebackRply")]
	public partial class FeebackRply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _RplyId;
		
		private string _Rply;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<bool> _IsActive;
		
		private EntityRef<tblfeedback> _tblfeedback;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRplyIdChanging(System.Nullable<int> value);
    partial void OnRplyIdChanged();
    partial void OnRplyChanging(string value);
    partial void OnRplyChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public FeebackRply()
		{
			this._tblfeedback = default(EntityRef<tblfeedback>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RplyId", DbType="Int")]
		public System.Nullable<int> RplyId
		{
			get
			{
				return this._RplyId;
			}
			set
			{
				if ((this._RplyId != value))
				{
					if (this._tblfeedback.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRplyIdChanging(value);
					this.SendPropertyChanging();
					this._RplyId = value;
					this.SendPropertyChanged("RplyId");
					this.OnRplyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rply", DbType="VarChar(500)")]
		public string Rply
		{
			get
			{
				return this._Rply;
			}
			set
			{
				if ((this._Rply != value))
				{
					this.OnRplyChanging(value);
					this.SendPropertyChanging();
					this._Rply = value;
					this.SendPropertyChanged("Rply");
					this.OnRplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblfeedback_FeebackRply", Storage="_tblfeedback", ThisKey="RplyId", OtherKey="Id", IsForeignKey=true)]
		public tblfeedback tblfeedback
		{
			get
			{
				return this._tblfeedback.Entity;
			}
			set
			{
				tblfeedback previousValue = this._tblfeedback.Entity;
				if (((previousValue != value) 
							|| (this._tblfeedback.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblfeedback.Entity = null;
						previousValue.FeebackRplies.Remove(this);
					}
					this._tblfeedback.Entity = value;
					if ((value != null))
					{
						value.FeebackRplies.Add(this);
						this._RplyId = value.Id;
					}
					else
					{
						this._RplyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblfeedback");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblavailableblocks")]
	public partial class tblavailableblock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _BlockId;
		
		private System.Nullable<int> _BlockNo;
		
		private System.Nullable<bool> _IsBooked;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<bool> _IsActive;
		
		private EntitySet<tblProperty> _tblProperties;
		
		private EntityRef<tblblockcategory> _tblblockcategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBlockIdChanging(System.Nullable<int> value);
    partial void OnBlockIdChanged();
    partial void OnBlockNoChanging(System.Nullable<int> value);
    partial void OnBlockNoChanged();
    partial void OnIsBookedChanging(System.Nullable<bool> value);
    partial void OnIsBookedChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblavailableblock()
		{
			this._tblProperties = new EntitySet<tblProperty>(new Action<tblProperty>(this.attach_tblProperties), new Action<tblProperty>(this.detach_tblProperties));
			this._tblblockcategory = default(EntityRef<tblblockcategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockId", DbType="Int")]
		public System.Nullable<int> BlockId
		{
			get
			{
				return this._BlockId;
			}
			set
			{
				if ((this._BlockId != value))
				{
					if (this._tblblockcategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlockIdChanging(value);
					this.SendPropertyChanging();
					this._BlockId = value;
					this.SendPropertyChanged("BlockId");
					this.OnBlockIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockNo", DbType="Int")]
		public System.Nullable<int> BlockNo
		{
			get
			{
				return this._BlockNo;
			}
			set
			{
				if ((this._BlockNo != value))
				{
					this.OnBlockNoChanging(value);
					this.SendPropertyChanging();
					this._BlockNo = value;
					this.SendPropertyChanged("BlockNo");
					this.OnBlockNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBooked", DbType="Bit")]
		public System.Nullable<bool> IsBooked
		{
			get
			{
				return this._IsBooked;
			}
			set
			{
				if ((this._IsBooked != value))
				{
					this.OnIsBookedChanging(value);
					this.SendPropertyChanging();
					this._IsBooked = value;
					this.SendPropertyChanged("IsBooked");
					this.OnIsBookedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblavailableblock_tblProperty", Storage="_tblProperties", ThisKey="Id", OtherKey="FlatId")]
		public EntitySet<tblProperty> tblProperties
		{
			get
			{
				return this._tblProperties;
			}
			set
			{
				this._tblProperties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblblockcategory_tblavailableblock", Storage="_tblblockcategory", ThisKey="BlockId", OtherKey="Id", IsForeignKey=true)]
		public tblblockcategory tblblockcategory
		{
			get
			{
				return this._tblblockcategory.Entity;
			}
			set
			{
				tblblockcategory previousValue = this._tblblockcategory.Entity;
				if (((previousValue != value) 
							|| (this._tblblockcategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblblockcategory.Entity = null;
						previousValue.tblavailableblocks.Remove(this);
					}
					this._tblblockcategory.Entity = value;
					if ((value != null))
					{
						value.tblavailableblocks.Add(this);
						this._BlockId = value.Id;
					}
					else
					{
						this._BlockId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblblockcategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblProperties(tblProperty entity)
		{
			this.SendPropertyChanging();
			entity.tblavailableblock = this;
		}
		
		private void detach_tblProperties(tblProperty entity)
		{
			this.SendPropertyChanging();
			entity.tblavailableblock = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblbank")]
	public partial class tblbank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _RegId;
		
		private string _BankName;
		
		private string _BankBranch;
		
		private string _IFSC;
		
		private System.Nullable<long> _AccountNo;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<bool> _IsActive;
		
		private EntityRef<tblreg> _tblreg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRegIdChanging(System.Nullable<int> value);
    partial void OnRegIdChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnBankBranchChanging(string value);
    partial void OnBankBranchChanged();
    partial void OnIFSCChanging(string value);
    partial void OnIFSCChanged();
    partial void OnAccountNoChanging(System.Nullable<long> value);
    partial void OnAccountNoChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblbank()
		{
			this._tblreg = default(EntityRef<tblreg>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegId", DbType="Int")]
		public System.Nullable<int> RegId
		{
			get
			{
				return this._RegId;
			}
			set
			{
				if ((this._RegId != value))
				{
					if (this._tblreg.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegIdChanging(value);
					this.SendPropertyChanging();
					this._RegId = value;
					this.SendPropertyChanged("RegId");
					this.OnRegIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="VarChar(50)")]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankBranch", DbType="VarChar(50)")]
		public string BankBranch
		{
			get
			{
				return this._BankBranch;
			}
			set
			{
				if ((this._BankBranch != value))
				{
					this.OnBankBranchChanging(value);
					this.SendPropertyChanging();
					this._BankBranch = value;
					this.SendPropertyChanged("BankBranch");
					this.OnBankBranchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IFSC", DbType="VarChar(11)")]
		public string IFSC
		{
			get
			{
				return this._IFSC;
			}
			set
			{
				if ((this._IFSC != value))
				{
					this.OnIFSCChanging(value);
					this.SendPropertyChanging();
					this._IFSC = value;
					this.SendPropertyChanged("IFSC");
					this.OnIFSCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNo", DbType="BigInt")]
		public System.Nullable<long> AccountNo
		{
			get
			{
				return this._AccountNo;
			}
			set
			{
				if ((this._AccountNo != value))
				{
					this.OnAccountNoChanging(value);
					this.SendPropertyChanging();
					this._AccountNo = value;
					this.SendPropertyChanged("AccountNo");
					this.OnAccountNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblbank", Storage="_tblreg", ThisKey="RegId", OtherKey="Id", IsForeignKey=true)]
		public tblreg tblreg
		{
			get
			{
				return this._tblreg.Entity;
			}
			set
			{
				tblreg previousValue = this._tblreg.Entity;
				if (((previousValue != value) 
							|| (this._tblreg.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblreg.Entity = null;
						previousValue.tblbanks.Remove(this);
					}
					this._tblreg.Entity = value;
					if ((value != null))
					{
						value.tblbanks.Add(this);
						this._RegId = value.Id;
					}
					else
					{
						this._RegId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblreg");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblblockcategory")]
	public partial class tblblockcategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BlockName;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<bool> _IsActive;
		
		private EntitySet<tblavailableblock> _tblavailableblocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBlockNameChanging(string value);
    partial void OnBlockNameChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblblockcategory()
		{
			this._tblavailableblocks = new EntitySet<tblavailableblock>(new Action<tblavailableblock>(this.attach_tblavailableblocks), new Action<tblavailableblock>(this.detach_tblavailableblocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockName", DbType="VarChar(50)")]
		public string BlockName
		{
			get
			{
				return this._BlockName;
			}
			set
			{
				if ((this._BlockName != value))
				{
					this.OnBlockNameChanging(value);
					this.SendPropertyChanging();
					this._BlockName = value;
					this.SendPropertyChanged("BlockName");
					this.OnBlockNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblblockcategory_tblavailableblock", Storage="_tblavailableblocks", ThisKey="Id", OtherKey="BlockId")]
		public EntitySet<tblavailableblock> tblavailableblocks
		{
			get
			{
				return this._tblavailableblocks;
			}
			set
			{
				this._tblavailableblocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblavailableblocks(tblavailableblock entity)
		{
			this.SendPropertyChanging();
			entity.tblblockcategory = this;
		}
		
		private void detach_tblavailableblocks(tblavailableblock entity)
		{
			this.SendPropertyChanging();
			entity.tblblockcategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblcontactus")]
	public partial class tblcontactus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<long> _Contact;
		
		private string _Email;
		
		private string _Message;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<bool> _IsActive;
		
		private EntitySet<tblrplycontact> _tblrplycontacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContactChanging(System.Nullable<long> value);
    partial void OnContactChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblcontactus()
		{
			this._tblrplycontacts = new EntitySet<tblrplycontact>(new Action<tblrplycontact>(this.attach_tblrplycontacts), new Action<tblrplycontact>(this.detach_tblrplycontacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact", DbType="BigInt")]
		public System.Nullable<long> Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				if ((this._Contact != value))
				{
					this.OnContactChanging(value);
					this.SendPropertyChanging();
					this._Contact = value;
					this.SendPropertyChanged("Contact");
					this.OnContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(500)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblcontactus_tblrplycontact", Storage="_tblrplycontacts", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<tblrplycontact> tblrplycontacts
		{
			get
			{
				return this._tblrplycontacts;
			}
			set
			{
				this._tblrplycontacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblrplycontacts(tblrplycontact entity)
		{
			this.SendPropertyChanging();
			entity.tblcontactus = this;
		}
		
		private void detach_tblrplycontacts(tblrplycontact entity)
		{
			this.SendPropertyChanging();
			entity.tblcontactus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblEmiMode")]
	public partial class tblEmiMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _PropertyId;
		
		private System.Nullable<int> _PlanMasterId;
		
		private System.Nullable<int> _PlanChargeId;
		
		private System.Nullable<int> _Mode;
		
		private System.Nullable<int> _Installment;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<bool> _IsActive;
		
		private EntitySet<tblPayment> _tblPayments;
		
		private EntitySet<tblPaymentHistory> _tblPaymentHistories;
		
		private EntitySet<tblPaymentMode> _tblPaymentModes;
		
		private EntityRef<tblPlanCharge> _tblPlanCharge;
		
		private EntityRef<tblPlansMaster> _tblPlansMaster;
		
		private EntityRef<tblProperty> _tblProperty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPropertyIdChanging(System.Nullable<int> value);
    partial void OnPropertyIdChanged();
    partial void OnPlanMasterIdChanging(System.Nullable<int> value);
    partial void OnPlanMasterIdChanged();
    partial void OnPlanChargeIdChanging(System.Nullable<int> value);
    partial void OnPlanChargeIdChanged();
    partial void OnModeChanging(System.Nullable<int> value);
    partial void OnModeChanged();
    partial void OnInstallmentChanging(System.Nullable<int> value);
    partial void OnInstallmentChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblEmiMode()
		{
			this._tblPayments = new EntitySet<tblPayment>(new Action<tblPayment>(this.attach_tblPayments), new Action<tblPayment>(this.detach_tblPayments));
			this._tblPaymentHistories = new EntitySet<tblPaymentHistory>(new Action<tblPaymentHistory>(this.attach_tblPaymentHistories), new Action<tblPaymentHistory>(this.detach_tblPaymentHistories));
			this._tblPaymentModes = new EntitySet<tblPaymentMode>(new Action<tblPaymentMode>(this.attach_tblPaymentModes), new Action<tblPaymentMode>(this.detach_tblPaymentModes));
			this._tblPlanCharge = default(EntityRef<tblPlanCharge>);
			this._tblPlansMaster = default(EntityRef<tblPlansMaster>);
			this._tblProperty = default(EntityRef<tblProperty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyId", DbType="Int")]
		public System.Nullable<int> PropertyId
		{
			get
			{
				return this._PropertyId;
			}
			set
			{
				if ((this._PropertyId != value))
				{
					if (this._tblProperty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIdChanging(value);
					this.SendPropertyChanging();
					this._PropertyId = value;
					this.SendPropertyChanged("PropertyId");
					this.OnPropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanMasterId", DbType="Int")]
		public System.Nullable<int> PlanMasterId
		{
			get
			{
				return this._PlanMasterId;
			}
			set
			{
				if ((this._PlanMasterId != value))
				{
					if (this._tblPlansMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanMasterIdChanging(value);
					this.SendPropertyChanging();
					this._PlanMasterId = value;
					this.SendPropertyChanged("PlanMasterId");
					this.OnPlanMasterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanChargeId", DbType="Int")]
		public System.Nullable<int> PlanChargeId
		{
			get
			{
				return this._PlanChargeId;
			}
			set
			{
				if ((this._PlanChargeId != value))
				{
					if (this._tblPlanCharge.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanChargeIdChanging(value);
					this.SendPropertyChanging();
					this._PlanChargeId = value;
					this.SendPropertyChanged("PlanChargeId");
					this.OnPlanChargeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mode", DbType="Int")]
		public System.Nullable<int> Mode
		{
			get
			{
				return this._Mode;
			}
			set
			{
				if ((this._Mode != value))
				{
					this.OnModeChanging(value);
					this.SendPropertyChanging();
					this._Mode = value;
					this.SendPropertyChanged("Mode");
					this.OnModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Installment", DbType="Int")]
		public System.Nullable<int> Installment
		{
			get
			{
				return this._Installment;
			}
			set
			{
				if ((this._Installment != value))
				{
					this.OnInstallmentChanging(value);
					this.SendPropertyChanging();
					this._Installment = value;
					this.SendPropertyChanged("Installment");
					this.OnInstallmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEmiMode_tblPayment", Storage="_tblPayments", ThisKey="Id", OtherKey="EMiModeId")]
		public EntitySet<tblPayment> tblPayments
		{
			get
			{
				return this._tblPayments;
			}
			set
			{
				this._tblPayments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEmiMode_tblPaymentHistory", Storage="_tblPaymentHistories", ThisKey="Id", OtherKey="EMiModeId")]
		public EntitySet<tblPaymentHistory> tblPaymentHistories
		{
			get
			{
				return this._tblPaymentHistories;
			}
			set
			{
				this._tblPaymentHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEmiMode_tblPaymentMode", Storage="_tblPaymentModes", ThisKey="Id", OtherKey="EMiModeId")]
		public EntitySet<tblPaymentMode> tblPaymentModes
		{
			get
			{
				return this._tblPaymentModes;
			}
			set
			{
				this._tblPaymentModes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPlanCharge_tblEmiMode", Storage="_tblPlanCharge", ThisKey="PlanChargeId", OtherKey="Id", IsForeignKey=true)]
		public tblPlanCharge tblPlanCharge
		{
			get
			{
				return this._tblPlanCharge.Entity;
			}
			set
			{
				tblPlanCharge previousValue = this._tblPlanCharge.Entity;
				if (((previousValue != value) 
							|| (this._tblPlanCharge.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPlanCharge.Entity = null;
						previousValue.tblEmiModes.Remove(this);
					}
					this._tblPlanCharge.Entity = value;
					if ((value != null))
					{
						value.tblEmiModes.Add(this);
						this._PlanChargeId = value.Id;
					}
					else
					{
						this._PlanChargeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblPlanCharge");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPlansMaster_tblEmiMode", Storage="_tblPlansMaster", ThisKey="PlanMasterId", OtherKey="Id", IsForeignKey=true)]
		public tblPlansMaster tblPlansMaster
		{
			get
			{
				return this._tblPlansMaster.Entity;
			}
			set
			{
				tblPlansMaster previousValue = this._tblPlansMaster.Entity;
				if (((previousValue != value) 
							|| (this._tblPlansMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPlansMaster.Entity = null;
						previousValue.tblEmiModes.Remove(this);
					}
					this._tblPlansMaster.Entity = value;
					if ((value != null))
					{
						value.tblEmiModes.Add(this);
						this._PlanMasterId = value.Id;
					}
					else
					{
						this._PlanMasterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblPlansMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblProperty_tblEmiMode", Storage="_tblProperty", ThisKey="PropertyId", OtherKey="Id", IsForeignKey=true)]
		public tblProperty tblProperty
		{
			get
			{
				return this._tblProperty.Entity;
			}
			set
			{
				tblProperty previousValue = this._tblProperty.Entity;
				if (((previousValue != value) 
							|| (this._tblProperty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblProperty.Entity = null;
						previousValue.tblEmiModes.Remove(this);
					}
					this._tblProperty.Entity = value;
					if ((value != null))
					{
						value.tblEmiModes.Add(this);
						this._PropertyId = value.Id;
					}
					else
					{
						this._PropertyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblProperty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblPayments(tblPayment entity)
		{
			this.SendPropertyChanging();
			entity.tblEmiMode = this;
		}
		
		private void detach_tblPayments(tblPayment entity)
		{
			this.SendPropertyChanging();
			entity.tblEmiMode = null;
		}
		
		private void attach_tblPaymentHistories(tblPaymentHistory entity)
		{
			this.SendPropertyChanging();
			entity.tblEmiMode = this;
		}
		
		private void detach_tblPaymentHistories(tblPaymentHistory entity)
		{
			this.SendPropertyChanging();
			entity.tblEmiMode = null;
		}
		
		private void attach_tblPaymentModes(tblPaymentMode entity)
		{
			this.SendPropertyChanging();
			entity.tblEmiMode = this;
		}
		
		private void detach_tblPaymentModes(tblPaymentMode entity)
		{
			this.SendPropertyChanging();
			entity.tblEmiMode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblfeedback")]
	public partial class tblfeedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Email;
		
		private System.Nullable<long> _ContactNo;
		
		private string _Msg;
		
		private System.Nullable<char> _Rating;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<bool> _IsActive;
		
		private EntitySet<FeebackRply> _FeebackRplies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnContactNoChanging(System.Nullable<long> value);
    partial void OnContactNoChanged();
    partial void OnMsgChanging(string value);
    partial void OnMsgChanged();
    partial void OnRatingChanging(System.Nullable<char> value);
    partial void OnRatingChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblfeedback()
		{
			this._FeebackRplies = new EntitySet<FeebackRply>(new Action<FeebackRply>(this.attach_FeebackRplies), new Action<FeebackRply>(this.detach_FeebackRplies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="BigInt")]
		public System.Nullable<long> ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msg", DbType="VarChar(500)")]
		public string Msg
		{
			get
			{
				return this._Msg;
			}
			set
			{
				if ((this._Msg != value))
				{
					this.OnMsgChanging(value);
					this.SendPropertyChanging();
					this._Msg = value;
					this.SendPropertyChanged("Msg");
					this.OnMsgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Char(1)")]
		public System.Nullable<char> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblfeedback_FeebackRply", Storage="_FeebackRplies", ThisKey="Id", OtherKey="RplyId")]
		public EntitySet<FeebackRply> FeebackRplies
		{
			get
			{
				return this._FeebackRplies;
			}
			set
			{
				this._FeebackRplies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeebackRplies(FeebackRply entity)
		{
			this.SendPropertyChanging();
			entity.tblfeedback = this;
		}
		
		private void detach_FeebackRplies(FeebackRply entity)
		{
			this.SendPropertyChanging();
			entity.tblfeedback = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblInvoice")]
	public partial class tblInvoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<long> _InvoiceNo;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<bool> _IsActive;
		
		private EntityRef<tblreg> _tblreg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnInvoiceNoChanging(System.Nullable<long> value);
    partial void OnInvoiceNoChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblInvoice()
		{
			this._tblreg = default(EntityRef<tblreg>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._tblreg.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNo", DbType="BigInt")]
		public System.Nullable<long> InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblInvoice", Storage="_tblreg", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public tblreg tblreg
		{
			get
			{
				return this._tblreg.Entity;
			}
			set
			{
				tblreg previousValue = this._tblreg.Entity;
				if (((previousValue != value) 
							|| (this._tblreg.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblreg.Entity = null;
						previousValue.tblInvoices.Remove(this);
					}
					this._tblreg.Entity = value;
					if ((value != null))
					{
						value.tblInvoices.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblreg");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblkyc")]
	public partial class tblkyc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _RegId;
		
		private string _Pan;
		
		private System.Nullable<long> _Aadhaar;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<bool> _IsActive;
		
		private EntityRef<tblreg> _tblreg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRegIdChanging(System.Nullable<int> value);
    partial void OnRegIdChanged();
    partial void OnPanChanging(string value);
    partial void OnPanChanged();
    partial void OnAadhaarChanging(System.Nullable<long> value);
    partial void OnAadhaarChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblkyc()
		{
			this._tblreg = default(EntityRef<tblreg>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegId", DbType="Int")]
		public System.Nullable<int> RegId
		{
			get
			{
				return this._RegId;
			}
			set
			{
				if ((this._RegId != value))
				{
					if (this._tblreg.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegIdChanging(value);
					this.SendPropertyChanging();
					this._RegId = value;
					this.SendPropertyChanged("RegId");
					this.OnRegIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pan", DbType="VarChar(10)")]
		public string Pan
		{
			get
			{
				return this._Pan;
			}
			set
			{
				if ((this._Pan != value))
				{
					this.OnPanChanging(value);
					this.SendPropertyChanging();
					this._Pan = value;
					this.SendPropertyChanged("Pan");
					this.OnPanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aadhaar", DbType="BigInt")]
		public System.Nullable<long> Aadhaar
		{
			get
			{
				return this._Aadhaar;
			}
			set
			{
				if ((this._Aadhaar != value))
				{
					this.OnAadhaarChanging(value);
					this.SendPropertyChanging();
					this._Aadhaar = value;
					this.SendPropertyChanged("Aadhaar");
					this.OnAadhaarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="Date")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="Date")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblkyc", Storage="_tblreg", ThisKey="RegId", OtherKey="Id", IsForeignKey=true)]
		public tblreg tblreg
		{
			get
			{
				return this._tblreg.Entity;
			}
			set
			{
				tblreg previousValue = this._tblreg.Entity;
				if (((previousValue != value) 
							|| (this._tblreg.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblreg.Entity = null;
						previousValue.tblkycs.Remove(this);
					}
					this._tblreg.Entity = value;
					if ((value != null))
					{
						value.tblkycs.Add(this);
						this._RegId = value.Id;
					}
					else
					{
						this._RegId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblreg");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPayment")]
	public partial class tblPayment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _EMiModeId;
		
		private System.Nullable<decimal> _TotalAmount;
		
		private System.Nullable<decimal> _PaidAmount;
		
		private System.Nullable<decimal> _DueAmount;
		
		private System.Nullable<decimal> _ExtraCharge;
		
		private System.Nullable<int> _InstallmentNo;
		
		private System.Nullable<System.DateTime> _NextDate;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<bool> _IsPaymentCompleted;
		
		private EntityRef<tblEmiMode> _tblEmiMode;
		
		private EntityRef<tblreg> _tblreg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnEMiModeIdChanging(System.Nullable<int> value);
    partial void OnEMiModeIdChanged();
    partial void OnTotalAmountChanging(System.Nullable<decimal> value);
    partial void OnTotalAmountChanged();
    partial void OnPaidAmountChanging(System.Nullable<decimal> value);
    partial void OnPaidAmountChanged();
    partial void OnDueAmountChanging(System.Nullable<decimal> value);
    partial void OnDueAmountChanged();
    partial void OnExtraChargeChanging(System.Nullable<decimal> value);
    partial void OnExtraChargeChanged();
    partial void OnInstallmentNoChanging(System.Nullable<int> value);
    partial void OnInstallmentNoChanged();
    partial void OnNextDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNextDateChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnIsPaymentCompletedChanging(System.Nullable<bool> value);
    partial void OnIsPaymentCompletedChanged();
    #endregion
		
		public tblPayment()
		{
			this._tblEmiMode = default(EntityRef<tblEmiMode>);
			this._tblreg = default(EntityRef<tblreg>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._tblreg.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMiModeId", DbType="Int")]
		public System.Nullable<int> EMiModeId
		{
			get
			{
				return this._EMiModeId;
			}
			set
			{
				if ((this._EMiModeId != value))
				{
					if (this._tblEmiMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMiModeIdChanging(value);
					this.SendPropertyChanging();
					this._EMiModeId = value;
					this.SendPropertyChanged("EMiModeId");
					this.OnEMiModeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> PaidAmount
		{
			get
			{
				return this._PaidAmount;
			}
			set
			{
				if ((this._PaidAmount != value))
				{
					this.OnPaidAmountChanging(value);
					this.SendPropertyChanging();
					this._PaidAmount = value;
					this.SendPropertyChanged("PaidAmount");
					this.OnPaidAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> DueAmount
		{
			get
			{
				return this._DueAmount;
			}
			set
			{
				if ((this._DueAmount != value))
				{
					this.OnDueAmountChanging(value);
					this.SendPropertyChanging();
					this._DueAmount = value;
					this.SendPropertyChanged("DueAmount");
					this.OnDueAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraCharge", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ExtraCharge
		{
			get
			{
				return this._ExtraCharge;
			}
			set
			{
				if ((this._ExtraCharge != value))
				{
					this.OnExtraChargeChanging(value);
					this.SendPropertyChanging();
					this._ExtraCharge = value;
					this.SendPropertyChanged("ExtraCharge");
					this.OnExtraChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstallmentNo", DbType="Int")]
		public System.Nullable<int> InstallmentNo
		{
			get
			{
				return this._InstallmentNo;
			}
			set
			{
				if ((this._InstallmentNo != value))
				{
					this.OnInstallmentNoChanging(value);
					this.SendPropertyChanging();
					this._InstallmentNo = value;
					this.SendPropertyChanged("InstallmentNo");
					this.OnInstallmentNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> NextDate
		{
			get
			{
				return this._NextDate;
			}
			set
			{
				if ((this._NextDate != value))
				{
					this.OnNextDateChanging(value);
					this.SendPropertyChanging();
					this._NextDate = value;
					this.SendPropertyChanged("NextDate");
					this.OnNextDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaymentCompleted", DbType="Bit")]
		public System.Nullable<bool> IsPaymentCompleted
		{
			get
			{
				return this._IsPaymentCompleted;
			}
			set
			{
				if ((this._IsPaymentCompleted != value))
				{
					this.OnIsPaymentCompletedChanging(value);
					this.SendPropertyChanging();
					this._IsPaymentCompleted = value;
					this.SendPropertyChanged("IsPaymentCompleted");
					this.OnIsPaymentCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEmiMode_tblPayment", Storage="_tblEmiMode", ThisKey="EMiModeId", OtherKey="Id", IsForeignKey=true)]
		public tblEmiMode tblEmiMode
		{
			get
			{
				return this._tblEmiMode.Entity;
			}
			set
			{
				tblEmiMode previousValue = this._tblEmiMode.Entity;
				if (((previousValue != value) 
							|| (this._tblEmiMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblEmiMode.Entity = null;
						previousValue.tblPayments.Remove(this);
					}
					this._tblEmiMode.Entity = value;
					if ((value != null))
					{
						value.tblPayments.Add(this);
						this._EMiModeId = value.Id;
					}
					else
					{
						this._EMiModeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblEmiMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblPayment", Storage="_tblreg", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public tblreg tblreg
		{
			get
			{
				return this._tblreg.Entity;
			}
			set
			{
				tblreg previousValue = this._tblreg.Entity;
				if (((previousValue != value) 
							|| (this._tblreg.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblreg.Entity = null;
						previousValue.tblPayments.Remove(this);
					}
					this._tblreg.Entity = value;
					if ((value != null))
					{
						value.tblPayments.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblreg");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPaymentHistory")]
	public partial class tblPaymentHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _EMiModeId;
		
		private System.Nullable<long> _InvoiceNo;
		
		private System.Nullable<decimal> _TotalAmount;
		
		private System.Nullable<decimal> _PaidAmount;
		
		private System.Nullable<decimal> _DueAmount;
		
		private System.Nullable<decimal> _ExtraCharge;
		
		private System.Nullable<int> _InstallmentNo;
		
		private System.Nullable<System.DateTime> _NextDate;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<bool> _IsPaymentCompleted;
		
		private EntityRef<tblEmiMode> _tblEmiMode;
		
		private EntityRef<tblreg> _tblreg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnEMiModeIdChanging(System.Nullable<int> value);
    partial void OnEMiModeIdChanged();
    partial void OnInvoiceNoChanging(System.Nullable<long> value);
    partial void OnInvoiceNoChanged();
    partial void OnTotalAmountChanging(System.Nullable<decimal> value);
    partial void OnTotalAmountChanged();
    partial void OnPaidAmountChanging(System.Nullable<decimal> value);
    partial void OnPaidAmountChanged();
    partial void OnDueAmountChanging(System.Nullable<decimal> value);
    partial void OnDueAmountChanged();
    partial void OnExtraChargeChanging(System.Nullable<decimal> value);
    partial void OnExtraChargeChanged();
    partial void OnInstallmentNoChanging(System.Nullable<int> value);
    partial void OnInstallmentNoChanged();
    partial void OnNextDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNextDateChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnIsPaymentCompletedChanging(System.Nullable<bool> value);
    partial void OnIsPaymentCompletedChanged();
    #endregion
		
		public tblPaymentHistory()
		{
			this._tblEmiMode = default(EntityRef<tblEmiMode>);
			this._tblreg = default(EntityRef<tblreg>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._tblreg.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMiModeId", DbType="Int")]
		public System.Nullable<int> EMiModeId
		{
			get
			{
				return this._EMiModeId;
			}
			set
			{
				if ((this._EMiModeId != value))
				{
					if (this._tblEmiMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMiModeIdChanging(value);
					this.SendPropertyChanging();
					this._EMiModeId = value;
					this.SendPropertyChanged("EMiModeId");
					this.OnEMiModeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNo", DbType="BigInt")]
		public System.Nullable<long> InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> PaidAmount
		{
			get
			{
				return this._PaidAmount;
			}
			set
			{
				if ((this._PaidAmount != value))
				{
					this.OnPaidAmountChanging(value);
					this.SendPropertyChanging();
					this._PaidAmount = value;
					this.SendPropertyChanged("PaidAmount");
					this.OnPaidAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> DueAmount
		{
			get
			{
				return this._DueAmount;
			}
			set
			{
				if ((this._DueAmount != value))
				{
					this.OnDueAmountChanging(value);
					this.SendPropertyChanging();
					this._DueAmount = value;
					this.SendPropertyChanged("DueAmount");
					this.OnDueAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraCharge", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ExtraCharge
		{
			get
			{
				return this._ExtraCharge;
			}
			set
			{
				if ((this._ExtraCharge != value))
				{
					this.OnExtraChargeChanging(value);
					this.SendPropertyChanging();
					this._ExtraCharge = value;
					this.SendPropertyChanged("ExtraCharge");
					this.OnExtraChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstallmentNo", DbType="Int")]
		public System.Nullable<int> InstallmentNo
		{
			get
			{
				return this._InstallmentNo;
			}
			set
			{
				if ((this._InstallmentNo != value))
				{
					this.OnInstallmentNoChanging(value);
					this.SendPropertyChanging();
					this._InstallmentNo = value;
					this.SendPropertyChanged("InstallmentNo");
					this.OnInstallmentNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> NextDate
		{
			get
			{
				return this._NextDate;
			}
			set
			{
				if ((this._NextDate != value))
				{
					this.OnNextDateChanging(value);
					this.SendPropertyChanging();
					this._NextDate = value;
					this.SendPropertyChanged("NextDate");
					this.OnNextDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="DateTime2")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaymentCompleted", DbType="Bit")]
		public System.Nullable<bool> IsPaymentCompleted
		{
			get
			{
				return this._IsPaymentCompleted;
			}
			set
			{
				if ((this._IsPaymentCompleted != value))
				{
					this.OnIsPaymentCompletedChanging(value);
					this.SendPropertyChanging();
					this._IsPaymentCompleted = value;
					this.SendPropertyChanged("IsPaymentCompleted");
					this.OnIsPaymentCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEmiMode_tblPaymentHistory", Storage="_tblEmiMode", ThisKey="EMiModeId", OtherKey="Id", IsForeignKey=true)]
		public tblEmiMode tblEmiMode
		{
			get
			{
				return this._tblEmiMode.Entity;
			}
			set
			{
				tblEmiMode previousValue = this._tblEmiMode.Entity;
				if (((previousValue != value) 
							|| (this._tblEmiMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblEmiMode.Entity = null;
						previousValue.tblPaymentHistories.Remove(this);
					}
					this._tblEmiMode.Entity = value;
					if ((value != null))
					{
						value.tblPaymentHistories.Add(this);
						this._EMiModeId = value.Id;
					}
					else
					{
						this._EMiModeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblEmiMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblPaymentHistory", Storage="_tblreg", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public tblreg tblreg
		{
			get
			{
				return this._tblreg.Entity;
			}
			set
			{
				tblreg previousValue = this._tblreg.Entity;
				if (((previousValue != value) 
							|| (this._tblreg.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblreg.Entity = null;
						previousValue.tblPaymentHistories.Remove(this);
					}
					this._tblreg.Entity = value;
					if ((value != null))
					{
						value.tblPaymentHistories.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblreg");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPaymentMode")]
	public partial class tblPaymentMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _Mode;
		
		private string _BankName;
		
		private string _BankBranch;
		
		private System.Nullable<long> _Check;
		
		private System.Nullable<long> _DD;
		
		private string _TransactionID;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<int> _EMiModeId;
		
		private EntityRef<tblEmiMode> _tblEmiMode;
		
		private EntityRef<tblreg> _tblreg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnModeChanging(System.Nullable<int> value);
    partial void OnModeChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnBankBranchChanging(string value);
    partial void OnBankBranchChanged();
    partial void OnCheckChanging(System.Nullable<long> value);
    partial void OnCheckChanged();
    partial void OnDDChanging(System.Nullable<long> value);
    partial void OnDDChanged();
    partial void OnTransactionIDChanging(string value);
    partial void OnTransactionIDChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnEMiModeIdChanging(System.Nullable<int> value);
    partial void OnEMiModeIdChanged();
    #endregion
		
		public tblPaymentMode()
		{
			this._tblEmiMode = default(EntityRef<tblEmiMode>);
			this._tblreg = default(EntityRef<tblreg>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._tblreg.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mode", DbType="Int")]
		public System.Nullable<int> Mode
		{
			get
			{
				return this._Mode;
			}
			set
			{
				if ((this._Mode != value))
				{
					this.OnModeChanging(value);
					this.SendPropertyChanging();
					this._Mode = value;
					this.SendPropertyChanged("Mode");
					this.OnModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="VarChar(50)")]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankBranch", DbType="VarChar(50)")]
		public string BankBranch
		{
			get
			{
				return this._BankBranch;
			}
			set
			{
				if ((this._BankBranch != value))
				{
					this.OnBankBranchChanging(value);
					this.SendPropertyChanging();
					this._BankBranch = value;
					this.SendPropertyChanged("BankBranch");
					this.OnBankBranchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Check]", Storage="_Check", DbType="BigInt")]
		public System.Nullable<long> Check
		{
			get
			{
				return this._Check;
			}
			set
			{
				if ((this._Check != value))
				{
					this.OnCheckChanging(value);
					this.SendPropertyChanging();
					this._Check = value;
					this.SendPropertyChanged("Check");
					this.OnCheckChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DD", DbType="BigInt")]
		public System.Nullable<long> DD
		{
			get
			{
				return this._DD;
			}
			set
			{
				if ((this._DD != value))
				{
					this.OnDDChanging(value);
					this.SendPropertyChanging();
					this._DD = value;
					this.SendPropertyChanged("DD");
					this.OnDDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="VarChar(50)")]
		public string TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime2")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMiModeId", DbType="Int")]
		public System.Nullable<int> EMiModeId
		{
			get
			{
				return this._EMiModeId;
			}
			set
			{
				if ((this._EMiModeId != value))
				{
					if (this._tblEmiMode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMiModeIdChanging(value);
					this.SendPropertyChanging();
					this._EMiModeId = value;
					this.SendPropertyChanged("EMiModeId");
					this.OnEMiModeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblEmiMode_tblPaymentMode", Storage="_tblEmiMode", ThisKey="EMiModeId", OtherKey="Id", IsForeignKey=true)]
		public tblEmiMode tblEmiMode
		{
			get
			{
				return this._tblEmiMode.Entity;
			}
			set
			{
				tblEmiMode previousValue = this._tblEmiMode.Entity;
				if (((previousValue != value) 
							|| (this._tblEmiMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblEmiMode.Entity = null;
						previousValue.tblPaymentModes.Remove(this);
					}
					this._tblEmiMode.Entity = value;
					if ((value != null))
					{
						value.tblPaymentModes.Add(this);
						this._EMiModeId = value.Id;
					}
					else
					{
						this._EMiModeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblEmiMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblPaymentMode", Storage="_tblreg", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public tblreg tblreg
		{
			get
			{
				return this._tblreg.Entity;
			}
			set
			{
				tblreg previousValue = this._tblreg.Entity;
				if (((previousValue != value) 
							|| (this._tblreg.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblreg.Entity = null;
						previousValue.tblPaymentModes.Remove(this);
					}
					this._tblreg.Entity = value;
					if ((value != null))
					{
						value.tblPaymentModes.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblreg");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPlanCharges")]
	public partial class tblPlanCharge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _PlanId;
		
		private System.Nullable<decimal> _EMI;
		
		private System.Nullable<decimal> _Total_EMI;
		
		private System.Nullable<decimal> _Tax;
		
		private System.Nullable<decimal> _Taxed_Amount;
		
		private System.Nullable<decimal> _Monthly_Amount;
		
		private System.Nullable<decimal> _Total_Amount;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<decimal> _Price;
		
		private EntitySet<tblEmiMode> _tblEmiModes;
		
		private EntityRef<tblPlansMaster> _tblPlansMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlanIdChanging(System.Nullable<int> value);
    partial void OnPlanIdChanged();
    partial void OnEMIChanging(System.Nullable<decimal> value);
    partial void OnEMIChanged();
    partial void OnTotal_EMIChanging(System.Nullable<decimal> value);
    partial void OnTotal_EMIChanged();
    partial void OnTaxChanging(System.Nullable<decimal> value);
    partial void OnTaxChanged();
    partial void OnTaxed_AmountChanging(System.Nullable<decimal> value);
    partial void OnTaxed_AmountChanged();
    partial void OnMonthly_AmountChanging(System.Nullable<decimal> value);
    partial void OnMonthly_AmountChanged();
    partial void OnTotal_AmountChanging(System.Nullable<decimal> value);
    partial void OnTotal_AmountChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    #endregion
		
		public tblPlanCharge()
		{
			this._tblEmiModes = new EntitySet<tblEmiMode>(new Action<tblEmiMode>(this.attach_tblEmiModes), new Action<tblEmiMode>(this.detach_tblEmiModes));
			this._tblPlansMaster = default(EntityRef<tblPlansMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanId", DbType="Int")]
		public System.Nullable<int> PlanId
		{
			get
			{
				return this._PlanId;
			}
			set
			{
				if ((this._PlanId != value))
				{
					if (this._tblPlansMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanIdChanging(value);
					this.SendPropertyChanging();
					this._PlanId = value;
					this.SendPropertyChanged("PlanId");
					this.OnPlanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMI", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> EMI
		{
			get
			{
				return this._EMI;
			}
			set
			{
				if ((this._EMI != value))
				{
					this.OnEMIChanging(value);
					this.SendPropertyChanging();
					this._EMI = value;
					this.SendPropertyChanged("EMI");
					this.OnEMIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_EMI", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Total_EMI
		{
			get
			{
				return this._Total_EMI;
			}
			set
			{
				if ((this._Total_EMI != value))
				{
					this.OnTotal_EMIChanging(value);
					this.SendPropertyChanging();
					this._Total_EMI = value;
					this.SendPropertyChanged("Total_EMI");
					this.OnTotal_EMIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tax", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Tax
		{
			get
			{
				return this._Tax;
			}
			set
			{
				if ((this._Tax != value))
				{
					this.OnTaxChanging(value);
					this.SendPropertyChanging();
					this._Tax = value;
					this.SendPropertyChanged("Tax");
					this.OnTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taxed_Amount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Taxed_Amount
		{
			get
			{
				return this._Taxed_Amount;
			}
			set
			{
				if ((this._Taxed_Amount != value))
				{
					this.OnTaxed_AmountChanging(value);
					this.SendPropertyChanging();
					this._Taxed_Amount = value;
					this.SendPropertyChanged("Taxed_Amount");
					this.OnTaxed_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Monthly_Amount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Monthly_Amount
		{
			get
			{
				return this._Monthly_Amount;
			}
			set
			{
				if ((this._Monthly_Amount != value))
				{
					this.OnMonthly_AmountChanging(value);
					this.SendPropertyChanging();
					this._Monthly_Amount = value;
					this.SendPropertyChanged("Monthly_Amount");
					this.OnMonthly_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Amount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Total_Amount
		{
			get
			{
				return this._Total_Amount;
			}
			set
			{
				if ((this._Total_Amount != value))
				{
					this.OnTotal_AmountChanging(value);
					this.SendPropertyChanging();
					this._Total_Amount = value;
					this.SendPropertyChanged("Total_Amount");
					this.OnTotal_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPlanCharge_tblEmiMode", Storage="_tblEmiModes", ThisKey="Id", OtherKey="PlanChargeId")]
		public EntitySet<tblEmiMode> tblEmiModes
		{
			get
			{
				return this._tblEmiModes;
			}
			set
			{
				this._tblEmiModes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPlansMaster_tblPlanCharge", Storage="_tblPlansMaster", ThisKey="PlanId", OtherKey="Id", IsForeignKey=true)]
		public tblPlansMaster tblPlansMaster
		{
			get
			{
				return this._tblPlansMaster.Entity;
			}
			set
			{
				tblPlansMaster previousValue = this._tblPlansMaster.Entity;
				if (((previousValue != value) 
							|| (this._tblPlansMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPlansMaster.Entity = null;
						previousValue.tblPlanCharges.Remove(this);
					}
					this._tblPlansMaster.Entity = value;
					if ((value != null))
					{
						value.tblPlanCharges.Add(this);
						this._PlanId = value.Id;
					}
					else
					{
						this._PlanId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblPlansMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblEmiModes(tblEmiMode entity)
		{
			this.SendPropertyChanging();
			entity.tblPlanCharge = this;
		}
		
		private void detach_tblEmiModes(tblEmiMode entity)
		{
			this.SendPropertyChanging();
			entity.tblPlanCharge = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPlansMaster")]
	public partial class tblPlansMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PlanName;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<int> _PropertyId;
		
		private EntitySet<tblEmiMode> _tblEmiModes;
		
		private EntitySet<tblPlanCharge> _tblPlanCharges;
		
		private EntityRef<tblProperty> _tblProperty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlanNameChanging(string value);
    partial void OnPlanNameChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnPropertyIdChanging(System.Nullable<int> value);
    partial void OnPropertyIdChanged();
    #endregion
		
		public tblPlansMaster()
		{
			this._tblEmiModes = new EntitySet<tblEmiMode>(new Action<tblEmiMode>(this.attach_tblEmiModes), new Action<tblEmiMode>(this.detach_tblEmiModes));
			this._tblPlanCharges = new EntitySet<tblPlanCharge>(new Action<tblPlanCharge>(this.attach_tblPlanCharges), new Action<tblPlanCharge>(this.detach_tblPlanCharges));
			this._tblProperty = default(EntityRef<tblProperty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanName", DbType="VarChar(50)")]
		public string PlanName
		{
			get
			{
				return this._PlanName;
			}
			set
			{
				if ((this._PlanName != value))
				{
					this.OnPlanNameChanging(value);
					this.SendPropertyChanging();
					this._PlanName = value;
					this.SendPropertyChanged("PlanName");
					this.OnPlanNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyId", DbType="Int")]
		public System.Nullable<int> PropertyId
		{
			get
			{
				return this._PropertyId;
			}
			set
			{
				if ((this._PropertyId != value))
				{
					if (this._tblProperty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIdChanging(value);
					this.SendPropertyChanging();
					this._PropertyId = value;
					this.SendPropertyChanged("PropertyId");
					this.OnPropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPlansMaster_tblEmiMode", Storage="_tblEmiModes", ThisKey="Id", OtherKey="PlanMasterId")]
		public EntitySet<tblEmiMode> tblEmiModes
		{
			get
			{
				return this._tblEmiModes;
			}
			set
			{
				this._tblEmiModes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPlansMaster_tblPlanCharge", Storage="_tblPlanCharges", ThisKey="Id", OtherKey="PlanId")]
		public EntitySet<tblPlanCharge> tblPlanCharges
		{
			get
			{
				return this._tblPlanCharges;
			}
			set
			{
				this._tblPlanCharges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblProperty_tblPlansMaster", Storage="_tblProperty", ThisKey="PropertyId", OtherKey="Id", IsForeignKey=true)]
		public tblProperty tblProperty
		{
			get
			{
				return this._tblProperty.Entity;
			}
			set
			{
				tblProperty previousValue = this._tblProperty.Entity;
				if (((previousValue != value) 
							|| (this._tblProperty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblProperty.Entity = null;
						previousValue.tblPlansMasters.Remove(this);
					}
					this._tblProperty.Entity = value;
					if ((value != null))
					{
						value.tblPlansMasters.Add(this);
						this._PropertyId = value.Id;
					}
					else
					{
						this._PropertyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblProperty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblEmiModes(tblEmiMode entity)
		{
			this.SendPropertyChanging();
			entity.tblPlansMaster = this;
		}
		
		private void detach_tblEmiModes(tblEmiMode entity)
		{
			this.SendPropertyChanging();
			entity.tblPlansMaster = null;
		}
		
		private void attach_tblPlanCharges(tblPlanCharge entity)
		{
			this.SendPropertyChanging();
			entity.tblPlansMaster = this;
		}
		
		private void detach_tblPlanCharges(tblPlanCharge entity)
		{
			this.SendPropertyChanging();
			entity.tblPlansMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblprofile")]
	public partial class tblprofile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _RegId;
		
		private string _Picture;
		
		private System.Nullable<char> _Gender;
		
		private string _State;
		
		private string _City;
		
		private string _Address;
		
		private System.Nullable<long> _Pin;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<bool> _IsActive;
		
		private EntityRef<tblreg> _tblreg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRegIdChanging(System.Nullable<int> value);
    partial void OnRegIdChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnGenderChanging(System.Nullable<char> value);
    partial void OnGenderChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPinChanging(System.Nullable<long> value);
    partial void OnPinChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblprofile()
		{
			this._tblreg = default(EntityRef<tblreg>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegId", DbType="Int")]
		public System.Nullable<int> RegId
		{
			get
			{
				return this._RegId;
			}
			set
			{
				if ((this._RegId != value))
				{
					if (this._tblreg.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegIdChanging(value);
					this.SendPropertyChanging();
					this._RegId = value;
					this.SendPropertyChanged("RegId");
					this.OnRegIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="VarChar(MAX)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Char(1)")]
		public System.Nullable<char> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pin", DbType="BigInt")]
		public System.Nullable<long> Pin
		{
			get
			{
				return this._Pin;
			}
			set
			{
				if ((this._Pin != value))
				{
					this.OnPinChanging(value);
					this.SendPropertyChanging();
					this._Pin = value;
					this.SendPropertyChanged("Pin");
					this.OnPinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblprofile", Storage="_tblreg", ThisKey="RegId", OtherKey="Id", IsForeignKey=true)]
		public tblreg tblreg
		{
			get
			{
				return this._tblreg.Entity;
			}
			set
			{
				tblreg previousValue = this._tblreg.Entity;
				if (((previousValue != value) 
							|| (this._tblreg.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblreg.Entity = null;
						previousValue.tblprofiles.Remove(this);
					}
					this._tblreg.Entity = value;
					if ((value != null))
					{
						value.tblprofiles.Add(this);
						this._RegId = value.Id;
					}
					else
					{
						this._RegId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblreg");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblProperties")]
	public partial class tblProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Address;
		
		private System.Nullable<long> _Price;
		
		private System.Nullable<int> _Bedroom;
		
		private System.Nullable<int> _Bathroom;
		
		private System.Nullable<long> _Area;
		
		private string _For;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<bool> _IsActive;
		
		private string _Image;
		
		private System.Nullable<int> _FlatId;
		
		private EntitySet<tblEmiMode> _tblEmiModes;
		
		private EntitySet<tblPlansMaster> _tblPlansMasters;
		
		private EntityRef<tblavailableblock> _tblavailableblock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPriceChanging(System.Nullable<long> value);
    partial void OnPriceChanged();
    partial void OnBedroomChanging(System.Nullable<int> value);
    partial void OnBedroomChanged();
    partial void OnBathroomChanging(System.Nullable<int> value);
    partial void OnBathroomChanged();
    partial void OnAreaChanging(System.Nullable<long> value);
    partial void OnAreaChanged();
    partial void OnForChanging(string value);
    partial void OnForChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnFlatIdChanging(System.Nullable<int> value);
    partial void OnFlatIdChanged();
    #endregion
		
		public tblProperty()
		{
			this._tblEmiModes = new EntitySet<tblEmiMode>(new Action<tblEmiMode>(this.attach_tblEmiModes), new Action<tblEmiMode>(this.detach_tblEmiModes));
			this._tblPlansMasters = new EntitySet<tblPlansMaster>(new Action<tblPlansMaster>(this.attach_tblPlansMasters), new Action<tblPlansMaster>(this.detach_tblPlansMasters));
			this._tblavailableblock = default(EntityRef<tblavailableblock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="BigInt")]
		public System.Nullable<long> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bedroom", DbType="Int")]
		public System.Nullable<int> Bedroom
		{
			get
			{
				return this._Bedroom;
			}
			set
			{
				if ((this._Bedroom != value))
				{
					this.OnBedroomChanging(value);
					this.SendPropertyChanging();
					this._Bedroom = value;
					this.SendPropertyChanged("Bedroom");
					this.OnBedroomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bathroom", DbType="Int")]
		public System.Nullable<int> Bathroom
		{
			get
			{
				return this._Bathroom;
			}
			set
			{
				if ((this._Bathroom != value))
				{
					this.OnBathroomChanging(value);
					this.SendPropertyChanging();
					this._Bathroom = value;
					this.SendPropertyChanged("Bathroom");
					this.OnBathroomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="BigInt")]
		public System.Nullable<long> Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[For]", Storage="_For", DbType="VarChar(16)")]
		public string For
		{
			get
			{
				return this._For;
			}
			set
			{
				if ((this._For != value))
				{
					this.OnForChanging(value);
					this.SendPropertyChanging();
					this._For = value;
					this.SendPropertyChanged("For");
					this.OnForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlatId", DbType="Int")]
		public System.Nullable<int> FlatId
		{
			get
			{
				return this._FlatId;
			}
			set
			{
				if ((this._FlatId != value))
				{
					if (this._tblavailableblock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlatIdChanging(value);
					this.SendPropertyChanging();
					this._FlatId = value;
					this.SendPropertyChanged("FlatId");
					this.OnFlatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblProperty_tblEmiMode", Storage="_tblEmiModes", ThisKey="Id", OtherKey="PropertyId")]
		public EntitySet<tblEmiMode> tblEmiModes
		{
			get
			{
				return this._tblEmiModes;
			}
			set
			{
				this._tblEmiModes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblProperty_tblPlansMaster", Storage="_tblPlansMasters", ThisKey="Id", OtherKey="PropertyId")]
		public EntitySet<tblPlansMaster> tblPlansMasters
		{
			get
			{
				return this._tblPlansMasters;
			}
			set
			{
				this._tblPlansMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblavailableblock_tblProperty", Storage="_tblavailableblock", ThisKey="FlatId", OtherKey="Id", IsForeignKey=true)]
		public tblavailableblock tblavailableblock
		{
			get
			{
				return this._tblavailableblock.Entity;
			}
			set
			{
				tblavailableblock previousValue = this._tblavailableblock.Entity;
				if (((previousValue != value) 
							|| (this._tblavailableblock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblavailableblock.Entity = null;
						previousValue.tblProperties.Remove(this);
					}
					this._tblavailableblock.Entity = value;
					if ((value != null))
					{
						value.tblProperties.Add(this);
						this._FlatId = value.Id;
					}
					else
					{
						this._FlatId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblavailableblock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblEmiModes(tblEmiMode entity)
		{
			this.SendPropertyChanging();
			entity.tblProperty = this;
		}
		
		private void detach_tblEmiModes(tblEmiMode entity)
		{
			this.SendPropertyChanging();
			entity.tblProperty = null;
		}
		
		private void attach_tblPlansMasters(tblPlansMaster entity)
		{
			this.SendPropertyChanging();
			entity.tblProperty = this;
		}
		
		private void detach_tblPlansMasters(tblPlansMaster entity)
		{
			this.SendPropertyChanging();
			entity.tblProperty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblreg")]
	public partial class tblreg : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _RegNo;
		
		private string _Name;
		
		private System.Nullable<long> _ContactNo;
		
		private string _Email;
		
		private string _Password;
		
		private System.Nullable<bool> _IsVerified;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<bool> _IsActive;
		
		private EntitySet<tblbank> _tblbanks;
		
		private EntitySet<tblInvoice> _tblInvoices;
		
		private EntitySet<tblkyc> _tblkycs;
		
		private EntitySet<tblPayment> _tblPayments;
		
		private EntitySet<tblPaymentHistory> _tblPaymentHistories;
		
		private EntitySet<tblPaymentMode> _tblPaymentModes;
		
		private EntitySet<tblprofile> _tblprofiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRegNoChanging(string value);
    partial void OnRegNoChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContactNoChanging(System.Nullable<long> value);
    partial void OnContactNoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsVerifiedChanging(System.Nullable<bool> value);
    partial void OnIsVerifiedChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblreg()
		{
			this._tblbanks = new EntitySet<tblbank>(new Action<tblbank>(this.attach_tblbanks), new Action<tblbank>(this.detach_tblbanks));
			this._tblInvoices = new EntitySet<tblInvoice>(new Action<tblInvoice>(this.attach_tblInvoices), new Action<tblInvoice>(this.detach_tblInvoices));
			this._tblkycs = new EntitySet<tblkyc>(new Action<tblkyc>(this.attach_tblkycs), new Action<tblkyc>(this.detach_tblkycs));
			this._tblPayments = new EntitySet<tblPayment>(new Action<tblPayment>(this.attach_tblPayments), new Action<tblPayment>(this.detach_tblPayments));
			this._tblPaymentHistories = new EntitySet<tblPaymentHistory>(new Action<tblPaymentHistory>(this.attach_tblPaymentHistories), new Action<tblPaymentHistory>(this.detach_tblPaymentHistories));
			this._tblPaymentModes = new EntitySet<tblPaymentMode>(new Action<tblPaymentMode>(this.attach_tblPaymentModes), new Action<tblPaymentMode>(this.detach_tblPaymentModes));
			this._tblprofiles = new EntitySet<tblprofile>(new Action<tblprofile>(this.attach_tblprofiles), new Action<tblprofile>(this.detach_tblprofiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegNo", DbType="VarChar(50)")]
		public string RegNo
		{
			get
			{
				return this._RegNo;
			}
			set
			{
				if ((this._RegNo != value))
				{
					this.OnRegNoChanging(value);
					this.SendPropertyChanging();
					this._RegNo = value;
					this.SendPropertyChanged("RegNo");
					this.OnRegNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="BigInt")]
		public System.Nullable<long> ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(16)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVerified", DbType="Bit")]
		public System.Nullable<bool> IsVerified
		{
			get
			{
				return this._IsVerified;
			}
			set
			{
				if ((this._IsVerified != value))
				{
					this.OnIsVerifiedChanging(value);
					this.SendPropertyChanging();
					this._IsVerified = value;
					this.SendPropertyChanged("IsVerified");
					this.OnIsVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="Date")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="Date")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblbank", Storage="_tblbanks", ThisKey="Id", OtherKey="RegId")]
		public EntitySet<tblbank> tblbanks
		{
			get
			{
				return this._tblbanks;
			}
			set
			{
				this._tblbanks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblInvoice", Storage="_tblInvoices", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<tblInvoice> tblInvoices
		{
			get
			{
				return this._tblInvoices;
			}
			set
			{
				this._tblInvoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblkyc", Storage="_tblkycs", ThisKey="Id", OtherKey="RegId")]
		public EntitySet<tblkyc> tblkycs
		{
			get
			{
				return this._tblkycs;
			}
			set
			{
				this._tblkycs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblPayment", Storage="_tblPayments", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<tblPayment> tblPayments
		{
			get
			{
				return this._tblPayments;
			}
			set
			{
				this._tblPayments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblPaymentHistory", Storage="_tblPaymentHistories", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<tblPaymentHistory> tblPaymentHistories
		{
			get
			{
				return this._tblPaymentHistories;
			}
			set
			{
				this._tblPaymentHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblPaymentMode", Storage="_tblPaymentModes", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<tblPaymentMode> tblPaymentModes
		{
			get
			{
				return this._tblPaymentModes;
			}
			set
			{
				this._tblPaymentModes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblreg_tblprofile", Storage="_tblprofiles", ThisKey="Id", OtherKey="RegId")]
		public EntitySet<tblprofile> tblprofiles
		{
			get
			{
				return this._tblprofiles;
			}
			set
			{
				this._tblprofiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblbanks(tblbank entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = this;
		}
		
		private void detach_tblbanks(tblbank entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = null;
		}
		
		private void attach_tblInvoices(tblInvoice entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = this;
		}
		
		private void detach_tblInvoices(tblInvoice entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = null;
		}
		
		private void attach_tblkycs(tblkyc entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = this;
		}
		
		private void detach_tblkycs(tblkyc entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = null;
		}
		
		private void attach_tblPayments(tblPayment entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = this;
		}
		
		private void detach_tblPayments(tblPayment entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = null;
		}
		
		private void attach_tblPaymentHistories(tblPaymentHistory entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = this;
		}
		
		private void detach_tblPaymentHistories(tblPaymentHistory entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = null;
		}
		
		private void attach_tblPaymentModes(tblPaymentMode entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = this;
		}
		
		private void detach_tblPaymentModes(tblPaymentMode entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = null;
		}
		
		private void attach_tblprofiles(tblprofile entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = this;
		}
		
		private void detach_tblprofiles(tblprofile entity)
		{
			this.SendPropertyChanging();
			entity.tblreg = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblrplycontact")]
	public partial class tblrplycontact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ContactId;
		
		private string _Rply;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<bool> _IsActive;
		
		private EntityRef<tblcontactus> _tblcontactus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnContactIdChanging(System.Nullable<int> value);
    partial void OnContactIdChanged();
    partial void OnRplyChanging(string value);
    partial void OnRplyChanged();
    partial void OnCrdtChanging(System.Nullable<System.DateTime> value);
    partial void OnCrdtChanged();
    partial void OnUpdtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdtChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public tblrplycontact()
		{
			this._tblcontactus = default(EntityRef<tblcontactus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="Int")]
		public System.Nullable<int> ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._tblcontactus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rply", DbType="VarChar(500)")]
		public string Rply
		{
			get
			{
				return this._Rply;
			}
			set
			{
				if ((this._Rply != value))
				{
					this.OnRplyChanging(value);
					this.SendPropertyChanging();
					this._Rply = value;
					this.SendPropertyChanged("Rply");
					this.OnRplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this.OnCrdtChanging(value);
					this.SendPropertyChanging();
					this._Crdt = value;
					this.SendPropertyChanged("Crdt");
					this.OnCrdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this.OnUpdtChanging(value);
					this.SendPropertyChanging();
					this._Updt = value;
					this.SendPropertyChanged("Updt");
					this.OnUpdtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblcontactus_tblrplycontact", Storage="_tblcontactus", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true)]
		public tblcontactus tblcontactus
		{
			get
			{
				return this._tblcontactus.Entity;
			}
			set
			{
				tblcontactus previousValue = this._tblcontactus.Entity;
				if (((previousValue != value) 
							|| (this._tblcontactus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblcontactus.Entity = null;
						previousValue.tblrplycontacts.Remove(this);
					}
					this._tblcontactus.Entity = value;
					if ((value != null))
					{
						value.tblrplycontacts.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblcontactus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class sp_propertydetailsResult
	{
		
		private int _Id;
		
		private string _Address;
		
		private System.Nullable<long> _Price;
		
		private System.Nullable<int> _Bedroom;
		
		private System.Nullable<int> _Bathroom;
		
		private System.Nullable<long> _Area;
		
		private string _Image;
		
		private string _PType;
		
		public sp_propertydetailsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="BigInt")]
		public System.Nullable<long> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bedroom", DbType="Int")]
		public System.Nullable<int> Bedroom
		{
			get
			{
				return this._Bedroom;
			}
			set
			{
				if ((this._Bedroom != value))
				{
					this._Bedroom = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bathroom", DbType="Int")]
		public System.Nullable<int> Bathroom
		{
			get
			{
				return this._Bathroom;
			}
			set
			{
				if ((this._Bathroom != value))
				{
					this._Bathroom = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="BigInt")]
		public System.Nullable<long> Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this._Area = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this._Image = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PType", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string PType
		{
			get
			{
				return this._PType;
			}
			set
			{
				if ((this._PType != value))
				{
					this._PType = value;
				}
			}
		}
	}
	
	public partial class sp_ratingResult
	{
		
		private System.Nullable<char> _Rating;
		
		private System.Nullable<int> _Total;
		
		public sp_ratingResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Char(1)")]
		public System.Nullable<char> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this._Rating = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
	}
	
	public partial class spViewAllBlocksResult
	{
		
		private string _BlockName;
		
		private int _Id;
		
		private System.Nullable<int> _BlockId;
		
		private System.Nullable<int> _BlockNo;
		
		private System.Nullable<bool> _IsBooked;
		
		private System.Nullable<System.DateTime> _Crdt;
		
		private System.Nullable<System.DateTime> _Updt;
		
		private System.Nullable<bool> _IsActive;
		
		public spViewAllBlocksResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockName", DbType="VarChar(50)")]
		public string BlockName
		{
			get
			{
				return this._BlockName;
			}
			set
			{
				if ((this._BlockName != value))
				{
					this._BlockName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockId", DbType="Int")]
		public System.Nullable<int> BlockId
		{
			get
			{
				return this._BlockId;
			}
			set
			{
				if ((this._BlockId != value))
				{
					this._BlockId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockNo", DbType="Int")]
		public System.Nullable<int> BlockNo
		{
			get
			{
				return this._BlockNo;
			}
			set
			{
				if ((this._BlockNo != value))
				{
					this._BlockNo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBooked", DbType="Bit")]
		public System.Nullable<bool> IsBooked
		{
			get
			{
				return this._IsBooked;
			}
			set
			{
				if ((this._IsBooked != value))
				{
					this._IsBooked = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crdt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Crdt
		{
			get
			{
				return this._Crdt;
			}
			set
			{
				if ((this._Crdt != value))
				{
					this._Crdt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updt", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updt
		{
			get
			{
				return this._Updt;
			}
			set
			{
				if ((this._Updt != value))
				{
					this._Updt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
	}
	
	public partial class spPropertyDetailsResult
	{
		
		private string _PlanName;
		
		private System.Nullable<long> _Price;
		
		private string _EmiMode;
		
		private int _EmiModeId;
		
		private System.Nullable<int> _InstallMent;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<int> _PropertyId;
		
		private System.Nullable<int> _PlanMasterId;
		
		private System.Nullable<int> _PlanchargeId;
		
		private System.Nullable<decimal> _Total_Amount;
		
		private System.Nullable<int> _FlatId;
		
		public spPropertyDetailsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanName", DbType="VarChar(50)")]
		public string PlanName
		{
			get
			{
				return this._PlanName;
			}
			set
			{
				if ((this._PlanName != value))
				{
					this._PlanName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="BigInt")]
		public System.Nullable<long> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmiMode", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string EmiMode
		{
			get
			{
				return this._EmiMode;
			}
			set
			{
				if ((this._EmiMode != value))
				{
					this._EmiMode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmiModeId", DbType="Int NOT NULL")]
		public int EmiModeId
		{
			get
			{
				return this._EmiModeId;
			}
			set
			{
				if ((this._EmiModeId != value))
				{
					this._EmiModeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstallMent", DbType="Int")]
		public System.Nullable<int> InstallMent
		{
			get
			{
				return this._InstallMent;
			}
			set
			{
				if ((this._InstallMent != value))
				{
					this._InstallMent = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyId", DbType="Int")]
		public System.Nullable<int> PropertyId
		{
			get
			{
				return this._PropertyId;
			}
			set
			{
				if ((this._PropertyId != value))
				{
					this._PropertyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanMasterId", DbType="Int")]
		public System.Nullable<int> PlanMasterId
		{
			get
			{
				return this._PlanMasterId;
			}
			set
			{
				if ((this._PlanMasterId != value))
				{
					this._PlanMasterId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanchargeId", DbType="Int")]
		public System.Nullable<int> PlanchargeId
		{
			get
			{
				return this._PlanchargeId;
			}
			set
			{
				if ((this._PlanchargeId != value))
				{
					this._PlanchargeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Amount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Total_Amount
		{
			get
			{
				return this._Total_Amount;
			}
			set
			{
				if ((this._Total_Amount != value))
				{
					this._Total_Amount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlatId", DbType="Int")]
		public System.Nullable<int> FlatId
		{
			get
			{
				return this._FlatId;
			}
			set
			{
				if ((this._FlatId != value))
				{
					this._FlatId = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
